<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.connie.community.core.dao.CommunityCommentMapper">
  <resultMap id="BaseResultMap" type="cn.connie.community.core.entity.CommunityComment">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="community_id" jdbcType="VARCHAR" property="communityId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="parent_comment_id" jdbcType="VARCHAR" property="parentCommentId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="praise_number" jdbcType="INTEGER" property="praiseNumber" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, community_id, user_id, parent_comment_id, content, state, praise_number, created
  </sql>
  <select id="selectByExample" parameterType="cn.connie.community.core.entity.CommunityCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_community_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_community_comment
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_community_comment
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.connie.community.core.entity.CommunityCommentExample">
    delete from t_community_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.connie.community.core.entity.CommunityComment">
    insert into t_community_comment (id, community_id, user_id, 
      parent_comment_id, content, state, 
      praise_number, created)
    values (#{id,jdbcType=VARCHAR}, #{communityId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{parentCommentId,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, 
      #{praiseNumber,jdbcType=INTEGER}, #{created,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.connie.community.core.entity.CommunityComment">
    insert into t_community_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="communityId != null">
        community_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="parentCommentId != null">
        parent_comment_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="praiseNumber != null">
        praise_number,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="communityId != null">
        #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="parentCommentId != null">
        #{parentCommentId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="praiseNumber != null">
        #{praiseNumber,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.connie.community.core.entity.CommunityCommentExample" resultType="java.lang.Long">
    select count(*) from t_community_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_community_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.communityId != null">
        community_id = #{record.communityId,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.parentCommentId != null">
        parent_comment_id = #{record.parentCommentId,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.praiseNumber != null">
        praise_number = #{record.praiseNumber,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_community_comment
    set id = #{record.id,jdbcType=VARCHAR},
      community_id = #{record.communityId,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      parent_comment_id = #{record.parentCommentId,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=TINYINT},
      praise_number = #{record.praiseNumber,jdbcType=INTEGER},
      created = #{record.created,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.connie.community.core.entity.CommunityComment">
    update t_community_comment
    <set>
      <if test="communityId != null">
        community_id = #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="parentCommentId != null">
        parent_comment_id = #{parentCommentId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="praiseNumber != null">
        praise_number = #{praiseNumber,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.connie.community.core.entity.CommunityComment">
    update t_community_comment
    set community_id = #{communityId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      parent_comment_id = #{parentCommentId,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      praise_number = #{praiseNumber,jdbcType=INTEGER},
      created = #{created,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="lockSelectByPrimaryKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_community_comment
    where id = #{id,jdbcType=VARCHAR}
    for update
  </select>
</mapper>